services:
  postgres:
    image: postgres
    container_name: kestra-db
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    image: kestra/kestra:latest-full
    container_name: kestra
    restart: unless-stopped
    pull_policy: always
    # Note that this setup with a root user is intended for development purpose.
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
    user: "root"
    command: server standalone --worker-thread=128
    volumes:
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
        kestra:
          server:
            basic-auth:
              enabled: false
              username: "${KESTRA_EMAIL}" # it must be a valid email address
              password: ${KESTRA_PASSWORD}
          repository:
            type: postgres
          storage:
            type: local
            local:
              base-path: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
      SECRET_KESTRA_BASE64_PRIVATE_SSH_KEY: ${SECRET_KESTRA_BASE64_PRIVATE_SSH_KEY} ## You NEED to have SECRET_ in the start and in lestra you use "{{ 'secret(KESTRA_BASE64.....)' }}"
      SECRET_KESTRA_BASE64_PUBLIC_SSH_KEY: ${SECRET_KESTRA_BASE64_PUBLIC_SSH_KEY}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started

volumes:
  postgres-data:
    driver: local
  kestra-data:
    driver: local
