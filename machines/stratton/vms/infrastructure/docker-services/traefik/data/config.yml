# MARK: HTTP ROUTERS
http:
  routers:
    ## Independent (non docker)
    ## Unifi webinterface
    unifi:
      entryPoints:
        - "https"
      rule: "Host(`unifi.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: unifi

    ## Pi-Hole webinterface
    pi-hole:
      entryPoints:
        - "https"
      rule: "Host(`pi-hole.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
        - pi-hole-redirect
      tls: {}
      service: pi-hole
    
    ## Home Assistant
    home-assistant:
      entryPoints:
        - "https"
      rule: "Host(`home-assistant.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: home-assistant
    
    ## Truenas webinterface
    truenas:
      entryPoints:
        - "https"
      rule: "Host(`truenas.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: truenas
    
    ## Proxmox
    ## Proxmox webinterface
    proxmox:
      entryPoints:
        - "https"
      rule: "Host(`pve.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: proxmox
    
    ## Node Exporter
    proxmox-prometheus-node:
      entryPoints:
        - "https"
      rule: "Host(`stratton-prometheus-node.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: proxmox-prometheus-node

    ## infrastrcture
    ## Authentik
    authentik:
      entryPoints:
        - "https"
      rule: "Host(`auth.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: authentik
    
    ## Grafana
    grafana:
      entryPoints:
        - "https"
      rule: "Host(`grafana.local.jabbas.dev`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: grafana

    ## Uptime-Kuma
    uptime-kuma:
      entryPoints:
        - "https"
      rule: "Host(`uptime-kuma.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
      tls: {}
      service: uptime-kuma

    ## Prometheus
    prometheus:
      entryPoints:
        - "https"
      rule: "Host(`prometheus.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: prometheus

    ## apps
    ## Open Webui
    open-webui:
      entryPoints:
        - "https"
      rule: "Host(`llm.local.jabbas.dev`) || Host(`llm.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        - cloudflarewarp
      tls: {}
      service: open-webui

    ## Serxng
    searxng:
      entryPoints:
        - "https"
      rule: "Host(`searxng.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: searxng
    
    ## Immich
    immich:
      entryPoints:
        - "https"
      rule: "Host(`immich.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: immich
    
    ## Nextcloud
    nextcloud:
      entryPoints:
        - "https"
      rule: "Host(`nextcloud.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: nextcloud
    
    ## Paperless-NGX
    paperless:
      entryPoints:
        - "https"
      rule: "Host(`paperless.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: paperless
    
    ## MicroBin
    microbin:
      entryPoints:
        - "https"
      rule: "Host(`microbin.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: microbin
    
    ## Vaultwarden
    vaultwarden:
      entryPoints:
        - "https"
      rule: "Host(`vaultwarden.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: vaultwarden
    
    ## Homepage
    homepage:
      entryPoints:
        - "https"
      rule: "Host(`homepage.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        - forwardAuth-authentik
      tls: {}
      service: homepage

    ## gpu-workloads
    ## Ollama
    ollama:
      entryPoints:
        - "https"
      rule: "Host(`ollama.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: ollama
    
    ## Jellyfin
    jellyfin:
      entryPoints:
        - "https"
      rule: "Host(`jellyfin.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: jellyfin
    
    ## ComfyUI
    comfyui:
      entryPoints:
        - "https"
      rule: "Host(`comfyui.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: comfyui
    
    ## dcgm exporter
    dcgm-exporter:
      entryPoints:
        - "https"
      rule: "Host(`gpu-prometheus-node.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dcgm-exporter

    ## media-downloader
    ## Jellyseerr
    jellyseerr:
      entryPoints:
        - "https"
      rule: "Host(`jellyseerr.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: jellyseerr

    ## SABnzbd
    sabnzbd:
      entryPoints:
        - "https"
      rule: "Host(`sabnzbd.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
      tls: {}
      service: sabnzbd

    ## Radarr
    radarr:
      entryPoints:
        - "https"
      rule: "Host(`radarr.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
      tls: {}
      service: radarr

    ## Sonarr
    sonarr:
      entryPoints:
        - "https"
      rule: "Host(`sonarr.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
      tls: {}
      service: sonarr

    ## Prowlarr
    prowlarr:
      entryPoints:
        - "https"
      rule: "Host(`prowlarr.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
      tls: {}
      service: prowlarr

    ## Bazarr
    bazarr:
      entryPoints:
        - "https"
      rule: "Host(`bazarr.local.jabbas.dev`)"
      middlewares:
        - disallow-iframe-embedding
        - default-headers
        - https-redirectscheme
        #- forwardAuth-authentik
      tls: {}
      service: bazarr

  # MARK: HTTP SERVICES
  services:
    ## Independent (non docker)
    ## Unifi webinterface
    unifi:
      loadBalancer:
        servers:
          - url: "https://192.168.10.1"
        passHostHeader: true

    ## Pi-Hole webinterface
    pi-hole:
      loadBalancer:
        servers:
          - url: "https://192.168.20.51:443"
        passHostHeader: true
    
    ## Home Assistant
    home-assistant:
      loadBalancer:
        servers:
          - url: "http://192.168.20.104:8123"
        passHostHeader: true

    ## Truenas
    truenas:
      loadBalancer:
        servers:
          - url: "https://192.168.20.101"
        passHostHeader: true

    ## Proxmox
    ## Proxmox web gui
    proxmox:
      loadBalancer:
        servers:
          - url: "https://192.168.20.2:8006"
        passHostHeader: true
    
    ## Node Exporter
    proxmox-prometheus-node:
      loadBalancer:
        servers:
          - url: "http://192.168.20.2:9100"
        passHostHeader: true

    ## Infrastrcture
    ## Grafana
    grafana:
      loadBalancer:
        servers:
          - url: "http://192.168.20.100:3030"
        passHostHeader: true
    
    ## Authentik
    authentik:
      loadBalancer:
        servers:
          - url: "https://192.168.20.100:9443"
        passHostHeader: true

    ## Uptime-Kuma
    uptime-kuma:
      loadBalancer:
        servers:
          - url: "http://192.168.20.100:3001"
        passHostHeader: true

    ## Prometheus
    prometheus:
      loadBalancer:
        servers:
          - url: "http://192.168.20.100:9090"
        passHostHeader: true

    ## Apps
    ## Immich
    immich:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:2283"
        passHostHeader: true

    ## Open Webui
    open-webui:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:3000"
        passHostHeader: true

    ## Homepage
    homepage:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:3001"
        passHostHeader: true
    
    ## Nextcloud
    nextcloud:
      loadBalancer:
        servers:
          - url: "https://192.168.20.103:4443"
        passHostHeader: true
    
    ## Vaultwarden
    vaultwarden:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:8000"
        passHostHeader: true
    
    ## Paperless-NGX
    paperless:
      loadBalancer:
        servers:
          - url: "https://192.168.20.103:8001"
        passHostHeader: true

    ## Searxng
    searxng:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:8080"
        passHostHeader: true
    
    ## MicroBin
    microbin:
      loadBalancer:
        servers:
          - url: "http://192.168.20.103:8081"
        passHostHeader: true

    ## GPU
    ## Ollama
    ollama:
      loadBalancer:
        servers:
          - url: "http://192.168.20.105:11434"
        passHostHeader: true
    
    ## Jellyfin
    jellyfin:
      loadBalancer:
        servers:
          - url: "http://192.168.20.105:8096"
        passHostHeader: true
    
    ## dcgm-exporter
    dcgm-exporter:
      loadBalancer:
        servers:
          - url: "http://192.168.20.105:9400"
        passHostHeader: true
    
    ## ComfyUI
    comfyui:
      loadBalancer:
        servers:
          - url: "http://192.168.20.105:7860"
        passHostHeader: true

    ## Media Stack
    ## Jellyseerr
    jellyseerr:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:5055"
        passHostHeader: true
    
    ## SABnzbd
    sabnzbd:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:8080"
        passHostHeader: true

    ## Radarr
    radarr:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:7878"
        passHostHeader: true

    ## Sonarr
    sonarr:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:8989"
        passHostHeader: true

    ## Prowlarr
    prowlarr:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:9696"
        passHostHeader: true

    ## Bazarr
    bazarr:
      loadBalancer:
        servers:
          - url: "http://192.168.20.102:6767"
        passHostHeader: true

  # HTTP MIDDLEWARES
  middlewares:
    https-redirectscheme:
      redirectScheme:
        scheme: https
        permanent: true
    
    default-headers:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customRequestHeaders:
          X-Forwarded-Proto: https
    
    disallow-iframe-embedding:
      headers:
        frameDeny: true
        customFrameOptionsValue: SAMEORIGIN

    default-whitelist:
      ipAllowList:
        sourceRange:
          - "192.168.0.0/16"

    secured:
      chain:
        middlewares:
          - default-whitelist
          - default-headers

    # Forwardauth for Authentik
    forwardAuth-authentik:
      forwardAuth:
        address: "http://authentik-server:9000/outpost.goauthentik.io/auth/traefik"
        trustForwardHeader: true
        authResponseHeaders:
          - X-authentik-username
          - X-authentik-groups
          - X-authentik-entitlements
          - X-authentik-email
          - X-authentik-name
          - X-authentik-uid
          - X-authentik-jwt
          - X-authentik-meta-jwks
          - X-authentik-meta-outpost
          - X-authentik-meta-provider
          - X-authentik-meta-app
          - X-authentik-meta-version
    
    #Crowdsec
    #crowdsec-bouncer:
    #  forwardauth:
    #    address: http://bouncer-traefik:8080/api/v1/forwardAuth
    #    trustForwardHeader: true
    
    # Get real ip from cloudflare tunnel
    cloudflarewarp:
      plugin:
        cloudflarewarp:
          disableDefault: false

    # pi-hole redirect, Redirects https://pi-hole.local.jabbas.dev -> https://pi-hole.local.jabbas.dev/admin
    pi-hole-redirect:
      redirectRegex:
        regex: "^https://([^/]+)/?$"
        replacement: "https://${1}/admin/"
