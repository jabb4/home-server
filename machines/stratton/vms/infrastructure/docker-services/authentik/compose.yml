services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped

    # Filesystem
    volumes:
      - database:/var/lib/postgresql/data
    
    # Security
    security_opt:
      - no-new-privileges:true  # forbid privilege escalation
    
    # Environment
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TIMEZONE:-Europe/Stockholm}

      # Service specific
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    

      
  redis:
    image: docker.io/library/redis:alpine
    restart: unless-stopped

    command: --save 60 1 --loglevel warning

    # Filesystem
    volumes:
      - redis:/data
    
    # Security
    security_opt:
      - no-new-privileges:true  # forbid privilege escalation
    
    # Environment
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TIMEZONE:-Europe/Stockholm}

    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    

      
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    command: server
    
    # Networking
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    
    # Filesystem
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    
    # Security
    security_opt:
      - no-new-privileges:true  # forbid privilege escalation
    
    # Environment
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TIMEZONE:-Europe/Stockholm}

      # Service specific
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    


  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

    command: worker

    # Filesystem
    volumes:
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    
    # Security
    security_opt:
      - no-new-privileges:true  # forbid privilege escalation

    # Environment
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TIMEZONE:-Europe/Stockholm}

      # Service specific
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

    

volumes:
  database:
    driver: local
  redis:
    driver: local
